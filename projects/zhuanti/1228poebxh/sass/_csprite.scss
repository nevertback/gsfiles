// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$close-h-name: 'close-h';
$close-h-x: 200px;
$close-h-y: 621px;
$close-h-offset-x: -200px;
$close-h-offset-y: -621px;
$close-h-width: 41px;
$close-h-height: 41px;
$close-h-total-width: 936px;
$close-h-total-height: 742px;
$close-h-image: '../ztimages/csprite.png';
$close-h: (200px, 621px, -200px, -621px, 41px, 41px, 936px, 742px, '../ztimages/csprite.png', 'close-h', );
$close-name: 'close';
$close-x: 151px;
$close-y: 621px;
$close-offset-x: -151px;
$close-offset-y: -621px;
$close-width: 41px;
$close-height: 41px;
$close-total-width: 936px;
$close-total-height: 742px;
$close-image: '../ztimages/csprite.png';
$close: (151px, 621px, -151px, -621px, 41px, 41px, 936px, 742px, '../ztimages/csprite.png', 'close', );
$logo-gf-name: 'logo-gf';
$logo-gf-x: 0px;
$logo-gf-y: 492px;
$logo-gf-offset-x: 0px;
$logo-gf-offset-y: -492px;
$logo-gf-width: 157px;
$logo-gf-height: 121px;
$logo-gf-total-width: 936px;
$logo-gf-total-height: 742px;
$logo-gf-image: '../ztimages/csprite.png';
$logo-gf: (0px, 492px, 0px, -492px, 157px, 121px, 936px, 742px, '../ztimages/csprite.png', 'logo-gf', );
$logo-gs-name: 'logo-gs';
$logo-gs-x: 595px;
$logo-gs-y: 492px;
$logo-gs-offset-x: -595px;
$logo-gs-offset-y: -492px;
$logo-gs-width: 142px;
$logo-gs-height: 56px;
$logo-gs-total-width: 936px;
$logo-gs-total-height: 742px;
$logo-gs-image: '../ztimages/csprite.png';
$logo-gs: (595px, 492px, -595px, -492px, 142px, 56px, 936px, 742px, '../ztimages/csprite.png', 'logo-gs', );
$play-h-name: 'play-h';
$play-h-x: 77px;
$play-h-y: 673px;
$play-h-offset-x: -77px;
$play-h-offset-y: -673px;
$play-h-width: 69px;
$play-h-height: 69px;
$play-h-total-width: 936px;
$play-h-total-height: 742px;
$play-h-image: '../ztimages/csprite.png';
$play-h: (77px, 673px, -77px, -673px, 69px, 69px, 936px, 742px, '../ztimages/csprite.png', 'play-h', );
$play-name: 'play';
$play-x: 0px;
$play-y: 673px;
$play-offset-x: 0px;
$play-offset-y: -673px;
$play-width: 69px;
$play-height: 69px;
$play-total-width: 936px;
$play-total-height: 742px;
$play-image: '../ztimages/csprite.png';
$play: (0px, 673px, 0px, -673px, 69px, 69px, 936px, 742px, '../ztimages/csprite.png', 'play', );
$s1-btn-h-name: 's1-btn-h';
$s1-btn-h-x: 745px;
$s1-btn-h-y: 492px;
$s1-btn-h-offset-x: -745px;
$s1-btn-h-offset-y: -492px;
$s1-btn-h-width: 143px;
$s1-btn-h-height: 44px;
$s1-btn-h-total-width: 936px;
$s1-btn-h-total-height: 742px;
$s1-btn-h-image: '../ztimages/csprite.png';
$s1-btn-h: (745px, 492px, -745px, -492px, 143px, 44px, 936px, 742px, '../ztimages/csprite.png', 's1-btn-h', );
$s1-btn-name: 's1-btn';
$s1-btn-x: 0px;
$s1-btn-y: 621px;
$s1-btn-offset-x: 0px;
$s1-btn-offset-y: -621px;
$s1-btn-width: 143px;
$s1-btn-height: 44px;
$s1-btn-total-width: 936px;
$s1-btn-total-height: 742px;
$s1-btn-image: '../ztimages/csprite.png';
$s1-btn: (0px, 621px, 0px, -621px, 143px, 44px, 936px, 742px, '../ztimages/csprite.png', 's1-btn', );
$s2-btn1-h-name: 's2-btn1-h';
$s2-btn1-h-x: 0px;
$s2-btn1-h-y: 246px;
$s2-btn1-h-offset-x: 0px;
$s2-btn1-h-offset-y: -246px;
$s2-btn1-h-width: 464px;
$s2-btn1-h-height: 238px;
$s2-btn1-h-total-width: 936px;
$s2-btn1-h-total-height: 742px;
$s2-btn1-h-image: '../ztimages/csprite.png';
$s2-btn1-h: (0px, 246px, 0px, -246px, 464px, 238px, 936px, 742px, '../ztimages/csprite.png', 's2-btn1-h', );
$s2-btn1-name: 's2-btn1';
$s2-btn1-x: 472px;
$s2-btn1-y: 246px;
$s2-btn1-offset-x: -472px;
$s2-btn1-offset-y: -246px;
$s2-btn1-width: 464px;
$s2-btn1-height: 238px;
$s2-btn1-total-width: 936px;
$s2-btn1-total-height: 742px;
$s2-btn1-image: '../ztimages/csprite.png';
$s2-btn1: (472px, 246px, -472px, -246px, 464px, 238px, 936px, 742px, '../ztimages/csprite.png', 's2-btn1', );
$s2-btn2-h-name: 's2-btn2-h';
$s2-btn2-h-x: 472px;
$s2-btn2-h-y: 0px;
$s2-btn2-h-offset-x: -472px;
$s2-btn2-h-offset-y: 0px;
$s2-btn2-h-width: 464px;
$s2-btn2-h-height: 238px;
$s2-btn2-h-total-width: 936px;
$s2-btn2-h-total-height: 742px;
$s2-btn2-h-image: '../ztimages/csprite.png';
$s2-btn2-h: (472px, 0px, -472px, 0px, 464px, 238px, 936px, 742px, '../ztimages/csprite.png', 's2-btn2-h', );
$s2-btn2-name: 's2-btn2';
$s2-btn2-x: 0px;
$s2-btn2-y: 0px;
$s2-btn2-offset-x: 0px;
$s2-btn2-offset-y: 0px;
$s2-btn2-width: 464px;
$s2-btn2-height: 238px;
$s2-btn2-total-width: 936px;
$s2-btn2-total-height: 742px;
$s2-btn2-image: '../ztimages/csprite.png';
$s2-btn2: (0px, 0px, 0px, 0px, 464px, 238px, 936px, 742px, '../ztimages/csprite.png', 's2-btn2', );
$s2-btn3-h-name: 's2-btn3-h';
$s2-btn3-h-x: 380px;
$s2-btn3-h-y: 492px;
$s2-btn3-h-offset-x: -380px;
$s2-btn3-h-offset-y: -492px;
$s2-btn3-h-width: 207px;
$s2-btn3-h-height: 90px;
$s2-btn3-h-total-width: 936px;
$s2-btn3-h-total-height: 742px;
$s2-btn3-h-image: '../ztimages/csprite.png';
$s2-btn3-h: (380px, 492px, -380px, -492px, 207px, 90px, 936px, 742px, '../ztimages/csprite.png', 's2-btn3-h', );
$s2-btn3-name: 's2-btn3';
$s2-btn3-x: 165px;
$s2-btn3-y: 492px;
$s2-btn3-offset-x: -165px;
$s2-btn3-offset-y: -492px;
$s2-btn3-width: 207px;
$s2-btn3-height: 90px;
$s2-btn3-total-width: 936px;
$s2-btn3-total-height: 742px;
$s2-btn3-image: '../ztimages/csprite.png';
$s2-btn3: (165px, 492px, -165px, -492px, 207px, 90px, 936px, 742px, '../ztimages/csprite.png', 's2-btn3', );
$spritesheet-width: 936px;
$spritesheet-height: 742px;
$spritesheet-image: '../ztimages/csprite.png';
$spritesheet-sprites: ($close-h, $close, $logo-gf, $logo-gs, $play-h, $play, $s1-btn-h, $s1-btn, $s2-btn1-h, $s2-btn1, $s2-btn2-h, $s2-btn2, $s2-btn3-h, $s2-btn3, );
$spritesheet: (936px, 742px, '../ztimages/csprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
