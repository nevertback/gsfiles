// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$logo-gf-name: 'logo-gf';
$logo-gf-x: 0px;
$logo-gf-y: 0px;
$logo-gf-offset-x: 0px;
$logo-gf-offset-y: 0px;
$logo-gf-width: 178px;
$logo-gf-height: 74px;
$logo-gf-total-width: 568px;
$logo-gf-total-height: 338px;
$logo-gf-image: '../ztimages/csprite.png';
$logo-gf: (0px, 0px, 0px, 0px, 178px, 74px, 568px, 338px, '../ztimages/csprite.png', 'logo-gf', );
$play-h-name: 'play-h';
$play-h-x: 381px;
$play-h-y: 66px;
$play-h-offset-x: -381px;
$play-h-offset-y: -66px;
$play-h-width: 100px;
$play-h-height: 100px;
$play-h-total-width: 568px;
$play-h-total-height: 338px;
$play-h-image: '../ztimages/csprite.png';
$play-h: (381px, 66px, -381px, -66px, 100px, 100px, 568px, 338px, '../ztimages/csprite.png', 'play-h', );
$play-name: 'play';
$play-x: 381px;
$play-y: 174px;
$play-offset-x: -381px;
$play-offset-y: -174px;
$play-width: 100px;
$play-height: 100px;
$play-total-width: 568px;
$play-total-height: 338px;
$play-image: '../ztimages/csprite.png';
$play: (381px, 174px, -381px, -174px, 100px, 100px, 568px, 338px, '../ztimages/csprite.png', 'play', );
$s1-btn1-h-name: 's1-btn1-h';
$s1-btn1-h-x: 0px;
$s1-btn1-h-y: 148px;
$s1-btn1-h-offset-x: 0px;
$s1-btn1-h-offset-y: -148px;
$s1-btn1-h-width: 187px;
$s1-btn1-h-height: 58px;
$s1-btn1-h-total-width: 568px;
$s1-btn1-h-total-height: 338px;
$s1-btn1-h-image: '../ztimages/csprite.png';
$s1-btn1-h: (0px, 148px, 0px, -148px, 187px, 58px, 568px, 338px, '../ztimages/csprite.png', 's1-btn1-h', );
$s1-btn1-name: 's1-btn1';
$s1-btn1-x: 0px;
$s1-btn1-y: 214px;
$s1-btn1-offset-x: 0px;
$s1-btn1-offset-y: -214px;
$s1-btn1-width: 187px;
$s1-btn1-height: 58px;
$s1-btn1-total-width: 568px;
$s1-btn1-total-height: 338px;
$s1-btn1-image: '../ztimages/csprite.png';
$s1-btn1: (0px, 214px, 0px, -214px, 187px, 58px, 568px, 338px, '../ztimages/csprite.png', 's1-btn1', );
$s1-btn2-h-name: 's1-btn2-h';
$s1-btn2-h-x: 186px;
$s1-btn2-h-y: 0px;
$s1-btn2-h-offset-x: -186px;
$s1-btn2-h-offset-y: 0px;
$s1-btn2-h-width: 187px;
$s1-btn2-h-height: 58px;
$s1-btn2-h-total-width: 568px;
$s1-btn2-h-total-height: 338px;
$s1-btn2-h-image: '../ztimages/csprite.png';
$s1-btn2-h: (186px, 0px, -186px, 0px, 187px, 58px, 568px, 338px, '../ztimages/csprite.png', 's1-btn2-h', );
$s1-btn2-name: 's1-btn2';
$s1-btn2-x: 381px;
$s1-btn2-y: 0px;
$s1-btn2-offset-x: -381px;
$s1-btn2-offset-y: 0px;
$s1-btn2-width: 187px;
$s1-btn2-height: 58px;
$s1-btn2-total-width: 568px;
$s1-btn2-total-height: 338px;
$s1-btn2-image: '../ztimages/csprite.png';
$s1-btn2: (381px, 0px, -381px, 0px, 187px, 58px, 568px, 338px, '../ztimages/csprite.png', 's1-btn2', );
$s1-btn3-h-name: 's1-btn3-h';
$s1-btn3-h-x: 0px;
$s1-btn3-h-y: 280px;
$s1-btn3-h-offset-x: 0px;
$s1-btn3-h-offset-y: -280px;
$s1-btn3-h-width: 187px;
$s1-btn3-h-height: 58px;
$s1-btn3-h-total-width: 568px;
$s1-btn3-h-total-height: 338px;
$s1-btn3-h-image: '../ztimages/csprite.png';
$s1-btn3-h: (0px, 280px, 0px, -280px, 187px, 58px, 568px, 338px, '../ztimages/csprite.png', 's1-btn3-h', );
$s1-btn3-name: 's1-btn3';
$s1-btn3-x: 0px;
$s1-btn3-y: 82px;
$s1-btn3-offset-x: 0px;
$s1-btn3-offset-y: -82px;
$s1-btn3-width: 187px;
$s1-btn3-height: 58px;
$s1-btn3-total-width: 568px;
$s1-btn3-total-height: 338px;
$s1-btn3-image: '../ztimages/csprite.png';
$s1-btn3: (0px, 82px, 0px, -82px, 187px, 58px, 568px, 338px, '../ztimages/csprite.png', 's1-btn3', );
$s7-nav-h-name: 's7-nav-h';
$s7-nav-h-x: 489px;
$s7-nav-h-y: 66px;
$s7-nav-h-offset-x: -489px;
$s7-nav-h-offset-y: -66px;
$s7-nav-h-width: 36px;
$s7-nav-h-height: 26px;
$s7-nav-h-total-width: 568px;
$s7-nav-h-total-height: 338px;
$s7-nav-h-image: '../ztimages/csprite.png';
$s7-nav-h: (489px, 66px, -489px, -66px, 36px, 26px, 568px, 338px, '../ztimages/csprite.png', 's7-nav-h', );
$s7-nav-name: 's7-nav';
$s7-nav-x: 489px;
$s7-nav-y: 100px;
$s7-nav-offset-x: -489px;
$s7-nav-offset-y: -100px;
$s7-nav-width: 36px;
$s7-nav-height: 26px;
$s7-nav-total-width: 568px;
$s7-nav-total-height: 338px;
$s7-nav-image: '../ztimages/csprite.png';
$s7-nav: (489px, 100px, -489px, -100px, 36px, 26px, 568px, 338px, '../ztimages/csprite.png', 's7-nav', );
$spritesheet-width: 568px;
$spritesheet-height: 338px;
$spritesheet-image: '../ztimages/csprite.png';
$spritesheet-sprites: ($logo-gf, $play-h, $play, $s1-btn1-h, $s1-btn1, $s1-btn2-h, $s1-btn2, $s1-btn3-h, $s1-btn3, $s7-nav-h, $s7-nav, );
$spritesheet: (568px, 338px, '../ztimages/csprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
