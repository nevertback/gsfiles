// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$arr-n-l-name: 'arr-n-l';
$arr-n-l-x: 189px;
$arr-n-l-y: 535px;
$arr-n-l-offset-x: -189px;
$arr-n-l-offset-y: -535px;
$arr-n-l-width: 55px;
$arr-n-l-height: 111px;
$arr-n-l-total-width: 658px;
$arr-n-l-total-height: 646px;
$arr-n-l-image: '../ztimages/csprite.png';
$arr-n-l: (189px, 535px, -189px, -535px, 55px, 111px, 658px, 646px, '../ztimages/csprite.png', 'arr-n-l', );
$arr-n-name: 'arr-n';
$arr-n-x: 0px;
$arr-n-y: 535px;
$arr-n-offset-x: 0px;
$arr-n-offset-y: -535px;
$arr-n-width: 55px;
$arr-n-height: 111px;
$arr-n-total-width: 658px;
$arr-n-total-height: 646px;
$arr-n-image: '../ztimages/csprite.png';
$arr-n: (0px, 535px, 0px, -535px, 55px, 111px, 658px, 646px, '../ztimages/csprite.png', 'arr-n', );
$arr-p-h-name: 'arr-p-h';
$arr-p-h-x: 126px;
$arr-p-h-y: 535px;
$arr-p-h-offset-x: -126px;
$arr-p-h-offset-y: -535px;
$arr-p-h-width: 55px;
$arr-p-h-height: 111px;
$arr-p-h-total-width: 658px;
$arr-p-h-total-height: 646px;
$arr-p-h-image: '../ztimages/csprite.png';
$arr-p-h: (126px, 535px, -126px, -535px, 55px, 111px, 658px, 646px, '../ztimages/csprite.png', 'arr-p-h', );
$arr-p-name: 'arr-p';
$arr-p-x: 63px;
$arr-p-y: 535px;
$arr-p-offset-x: -63px;
$arr-p-offset-y: -535px;
$arr-p-width: 55px;
$arr-p-height: 111px;
$arr-p-total-width: 658px;
$arr-p-total-height: 646px;
$arr-p-image: '../ztimages/csprite.png';
$arr-p: (63px, 535px, -63px, -535px, 55px, 111px, 658px, 646px, '../ztimages/csprite.png', 'arr-p', );
$logo-gf-name: 'logo-gf';
$logo-gf-x: 375px;
$logo-gf-y: 290px;
$logo-gf-offset-x: -375px;
$logo-gf-offset-y: -290px;
$logo-gf-width: 185px;
$logo-gf-height: 102px;
$logo-gf-total-width: 658px;
$logo-gf-total-height: 646px;
$logo-gf-image: '../ztimages/csprite.png';
$logo-gf: (375px, 290px, -375px, -290px, 185px, 102px, 658px, 646px, '../ztimages/csprite.png', 'logo-gf', );
$logo-gs-name: 'logo-gs';
$logo-gs-x: 127px;
$logo-gs-y: 402px;
$logo-gs-offset-x: -127px;
$logo-gs-offset-y: -402px;
$logo-gs-width: 163px;
$logo-gs-height: 58px;
$logo-gs-total-width: 658px;
$logo-gs-total-height: 646px;
$logo-gs-image: '../ztimages/csprite.png';
$logo-gs: (127px, 402px, -127px, -402px, 163px, 58px, 658px, 646px, '../ztimages/csprite.png', 'logo-gs', );
$s1-play-shadow-name: 's1-play-shadow';
$s1-play-shadow-x: 0px;
$s1-play-shadow-y: 0px;
$s1-play-shadow-offset-x: 0px;
$s1-play-shadow-offset-y: 0px;
$s1-play-shadow-width: 283px;
$s1-play-shadow-height: 282px;
$s1-play-shadow-total-width: 658px;
$s1-play-shadow-total-height: 646px;
$s1-play-shadow-image: '../ztimages/csprite.png';
$s1-play-shadow: (0px, 0px, 0px, 0px, 283px, 282px, 658px, 646px, '../ztimages/csprite.png', 's1-play-shadow', );
$s1-play-name: 's1-play';
$s1-play-x: 0px;
$s1-play-y: 402px;
$s1-play-offset-x: 0px;
$s1-play-offset-y: -402px;
$s1-play-width: 119px;
$s1-play-height: 125px;
$s1-play-total-width: 658px;
$s1-play-total-height: 646px;
$s1-play-image: '../ztimages/csprite.png';
$s1-play: (0px, 402px, 0px, -402px, 119px, 125px, 658px, 646px, '../ztimages/csprite.png', 's1-play', );
$s2-btn1-name: 's2-btn1';
$s2-btn1-x: 0px;
$s2-btn1-y: 290px;
$s2-btn1-offset-x: 0px;
$s2-btn1-offset-y: -290px;
$s2-btn1-width: 367px;
$s2-btn1-height: 104px;
$s2-btn1-total-width: 658px;
$s2-btn1-total-height: 646px;
$s2-btn1-image: '../ztimages/csprite.png';
$s2-btn1: (0px, 290px, 0px, -290px, 367px, 104px, 658px, 646px, '../ztimages/csprite.png', 's2-btn1', );
$s2-btn2-name: 's2-btn2';
$s2-btn2-x: 291px;
$s2-btn2-y: 127px;
$s2-btn2-offset-x: -291px;
$s2-btn2-offset-y: -127px;
$s2-btn2-width: 367px;
$s2-btn2-height: 104px;
$s2-btn2-total-width: 658px;
$s2-btn2-total-height: 646px;
$s2-btn2-image: '../ztimages/csprite.png';
$s2-btn2: (291px, 127px, -291px, -127px, 367px, 104px, 658px, 646px, '../ztimages/csprite.png', 's2-btn2', );
$s2-btn3-name: 's2-btn3';
$s2-btn3-x: 291px;
$s2-btn3-y: 0px;
$s2-btn3-offset-x: -291px;
$s2-btn3-offset-y: 0px;
$s2-btn3-width: 367px;
$s2-btn3-height: 119px;
$s2-btn3-total-width: 658px;
$s2-btn3-total-height: 646px;
$s2-btn3-image: '../ztimages/csprite.png';
$s2-btn3: (291px, 0px, -291px, 0px, 367px, 119px, 658px, 646px, '../ztimages/csprite.png', 's2-btn3', );
$spritesheet-width: 658px;
$spritesheet-height: 646px;
$spritesheet-image: '../ztimages/csprite.png';
$spritesheet-sprites: ($arr-n-l, $arr-n, $arr-p-h, $arr-p, $logo-gf, $logo-gs, $s1-play-shadow, $s1-play, $s2-btn1, $s2-btn2, $s2-btn3, );
$spritesheet: (658px, 646px, '../ztimages/csprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
